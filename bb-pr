#!/usr/bin/env bash
# Requires you to have exported 2 environment variables:
# export BITBUCKET_USER=my_bitbucket_username
# export BITBUCKET_TOKEN=my_bitbucket_app_password
#
# c.f. https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/
# Requires:
# - jq   : https://github.com/jqlang/jq
# - jf   : https://github.com/sayanarijit/jf (to json encode multiline comments)
# - curl : why of course it does!, why haven't you got it?

set -eo pipefail

_giturl_to_base () {
  local url=$1
  url=${url%%.git}
  url=${url#*bitbucket*:}
  url=${url#*bitbucket*/}
  echo "$url"
}

BITBUCKET_API_URL="https://api.bitbucket.org/2.0/repositories"
GIT_REMOTE=$(_giturl_to_base "$(git remote get-url origin)") || true
BITBUCKET_SLUG=${GIT_REMOTE%.git}
GIT_REMOTE_BRANCH=$(git rev-parse --abbrev-ref --symbolic-full-name "@{u}" 2>/dev/null | cut -f2- -d'/') || true
GIT_LOCAL_WORKING_BRANCH=$(git branch --show-current) || true
GIT_REMOTE_DEFAULT=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5) || true

ACTION_LIST="help|list|checkout|squash-msg|squash-merge|approve|unapprove|decline|close-branch"
WORK_FILE=$(mktemp --tmpdir bb-pr-squash-merge.XXXXXX)

CURL_AUTH="${BITBUCKET_USER}:${BITBUCKET_TOKEN}"
CURL_HEADER_CTYPE="Content-Type: application/json"
CURL_HEADER_ACCEPT="Accept: application/json"
CURL_FLAGS="-fsSL"

trap cleanup 1 2 15

# Need to get someone to let me test on a mac.
# Macs can use pbcopy apparently, but they should just
# set the BB_PR_CLIPBOARD env variable
clipboard_exe() {
  if [[ -z "$BB_PR_CLIPBOARD" ]]; then
    if [[ -n "$WSL_DISTRO_NAME" ]]; then
      LOCAL_DRIVE_C=$(mount | grep "9p" | grep "path=C:" | awk '{print $3}')
      echo "$LOCAL_DRIVE_C/windows/system32/clip.exe"
    elif [[ -n "${XDG_CURRENT_DESKTOP}" ]]; then
      echo "xclip"
    fi
  else
    echo "$BB_PR_CLIPBOARD"
  fi
}

cleanup() {
  if [[ -n "${WORK_FILE:-}" ]]; then
    rm -f "$WORK_FILE"
  fi
}

get_pr_number() {
  local pr_number="$1"
  if [[ -z "$pr_number" && -n "${GIT_REMOTE_BRANCH}" ]]; then
    query=$(printf "source.branch.name=\"%s\" AND state=\"OPEN\"" "${GIT_REMOTE_BRANCH}")
    query_uri=$(printf %s "${query}" | jq -sRr @uri)
    local pull_request_query_url="${BITBUCKET_API_URL}/${BITBUCKET_SLUG}/pullrequests?q=${query_uri}"
    pr_number=$(curl $CURL_FLAGS --user "$CURL_AUTH" -H "$CURL_HEADER_ACCEPT" "${pull_request_query_url}" | jq .values[0].id)
    if [ "$pr_number" != "null" ]; then
      echo "$pr_number"
    fi
  else
    echo "$pr_number"
  fi
}

action_help() {
  cat <<EOF

Tool that helps management of bitbucket pull requests from the commandline

Usage: $(basename "$0") [$ACTION_LIST] [options]
  help         : show this help
  list         : list (open) PRs in this repo
  checkout     : check out a pull request in git
  squash-msg   : copy a reasonable message to the clipboard for merging a PR
  squash-merge : merge the PR using the message from 'squash-msg'
  approve      : approve a PR (though should you from the CLI?)
  unapprove    : remove your approval
  decline      : decline a PR
  close-branch : change the 'close_source_branch' field

'squash-msg' | 'squash-merge' | 'approve' | 'unapprove' | 'decline' | 'close-branch'
Without an argument, the pull request that belongs to the current branch
is used.

Arguments
  <PR> The PR number to operate on.

'close-branch' can toggle true or false (default true)
  -c : true|false (e.g. -c false) to toggle the state

'squash-merge' can do dangerous things
  -D : force close the branch regardless of the PR setting. If not
       specified then the PR will be merged according to the PR
       settings.

'list' can additionally filter by state
  -s : the state (e.g. -s OPEN) OPEN|MERGED|DECLINED|SUPERSEDED
       If you get it wrong, you'll get all the PRs which may take
       longer than you want. Defaults to 'OPEN'

Examples
If we are on the branch 'fix/owasp'

# Squash Merge the PR associated with 'fix/owasp' and close (delete) the source branch
# The local branch 'fix/owasp' is deleted and you will end up on the 'main' branch
bsh ❯ bb-pr squash-merge -D

# Squash Merge the PR associated with 'feat/owasp' according its PR settings
# The local branch 'fix/owasp' is deleted and you will end up on the 'main' branch
bsh ❯ bb-pr squash-merge

# Squash Merge the PR#5 leaving you on the 'feat/owasp'
bsh ❯ bb-pr squash-merge 5

# Squash Merge the PR#5 deleting the source branch leaving you on the 'feat/owasp'
bsh ❯ bb-pr squash-merge -D 5

EOF
  exit 1
}

action_list() {
  local jq_transform='.values[]
    | { "id": (.id | tostring), "title": .title, "url": .links.html.href }
    | "\(.id)|\(.title)|\(.url)"
  '
  local response
  local next
  local state="OPEN"

  while getopts 's:' flag; do
    case "${flag}" in
    s) state="${OPTARG}" ;;
    *) action_help ;;
    esac
  done
  state=$(echo "$state" | tr '[:lower:]' '[:upper:]')
  local pull_request_url="$BITBUCKET_API_URL/$BITBUCKET_SLUG/pullrequests?state=$state"

  {
    next="$pull_request_url"
    until [ "$next" == "null" ]; do
      response=$(curl $CURL_FLAGS --user "$CURL_AUTH" -H "$CURL_HEADER_ACCEPT" "$next")
      echo "$response" | jq --raw-output "$jq_transform"
      next=$(echo "$response" | jq --raw-output ".next")
    done
  } | sort | column -s "|" -t -N "ID,TITLE,URL"
}

action_decline() {
  local pr_number="$1"
  pr_number=$(get_pr_number "$pr_number")
  if [[ -z "$pr_number" ]]; then
    echo ">>> No PR"
    exit 1
  fi

  local pull_request_url="$BITBUCKET_API_URL/$BITBUCKET_SLUG/pullrequests/$pr_number/decline"

  curl -X POST $CURL_FLAGS --user "$CURL_AUTH" -H "$CURL_HEADER_ACCEPT" "$pull_request_url" | jq --raw-output '"\(.state)"'
}

action_approve() {
  local pr_number="$1"
  pr_number=$(get_pr_number "$pr_number")
  if [[ -z "$pr_number" ]]; then
    echo ">>> No PR"
    exit 1
  fi

  local pull_request_url="$BITBUCKET_API_URL/$BITBUCKET_SLUG/pullrequests/$pr_number/approve"

  curl -X POST $CURL_FLAGS --user "$CURL_AUTH" -H "$CURL_HEADER_ACCEPT" "$pull_request_url" | jq --raw-output '"\(.state)"'
}

action_unapprove() {
  local pr_number="$1"
  pr_number=$(get_pr_number "$pr_number")
  if [[ -z "$pr_number" ]]; then
    echo ">>> No PR"
    exit 1
  fi

  local pull_request_url="$BITBUCKET_API_URL/$BITBUCKET_SLUG/pullrequests/$pr_number/approve"

  curl -X DELETE $CURL_FLAGS --user "$CURL_AUTH" -H "$CURL_HEADER_ACCEPT" "$pull_request_url"
}

action_squash-msg() {
  local pr_number=$1
  local squash_merge_msg

  pr_number=$(get_pr_number "$pr_number")
  if [[ -z "$pr_number" ]]; then
    echo ">>> No PR"
    exit 1
  fi
  squash_merge_msg=$(emit_squash_merge_msg "$pr_number")
  echo "---"
  echo "$squash_merge_msg"
  echo "---"
  echo "is now in your clipboard"
  # shellcheck disable=SC2091
  echo "$squash_merge_msg" | eval "$(clipboard_exe)"
}

action_squash-merge() {
  local squash_merge_msg
  local json_payload
  local jq_transform='"\(.id)|\(.state)"'
  local delete_local_branch=""
  local force_close_branch=""

  ARGS=$(getopt --options 'D' -- "${@}")
  eval "set -- ${ARGS}"
  while true; do
    case "${1}" in
    -D)
      force_close_branch="true"
      shift
      ;;
    --)
      shift
      break
      ;;
    *) action_help ;;
    esac
  done

  local pr_number="$1"
  # If there's no PR number then we assume we're branch based
  # and since we are squash merging we try to behave like gh squash-merge
  # and delete the local working branch
  if [[ -z "$pr_number" ]]; then
    pr_number=$(get_pr_number "")
    delete_local_branch="true"
  fi

  if [[ -z "$pr_number" ]]; then
    echo ">>> No PR"
    exit 1
  fi

  local pull_request_url="$BITBUCKET_API_URL/$BITBUCKET_SLUG/pullrequests/$pr_number/merge"

  squash_merge_msg=$(emit_squash_merge_msg "$pr_number")

  # https://developer.atlassian.com/cloud/bitbucket/rest/api-group-pullrequests/
  # mentions a mandatory 'type' in the request body, but there's no docs
  # as to what the value should be; but we should be safe to
  # assume it's the 'type' that you get back when you grab the pullrequest
  # /repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}
  # probably want some tempfile action for a bit of --data @filename
  if [[ -n "$force_close_branch" ]]; then
    json_payload=$(jf '{%**q}' "type" "pullrequest" "message" "$squash_merge_msg" "close_source_branch" "true" "merge_strategy" "squash")
  else
    json_payload=$(jf '{%**q}' "type" "pullrequest" "message" "$squash_merge_msg" "merge_strategy" "squash")
  fi
  echo "$json_payload" >"$WORK_FILE"
  curl -X POST $CURL_FLAGS --user "$CURL_AUTH" -H "$CURL_HEADER_ACCEPT" -H "$CURL_HEADER_CTYPE" "$pull_request_url" "--data" "@$WORK_FILE" | jq --raw-output "$jq_transform" | column -s "|" -t -N "ID,STATE"

  if [[ -n "$delete_local_branch" ]]; then
    git_switch_default
  fi
}

action_close-branch() {
  close_branch="true"
  ARGS=$(getopt --options 'c:' -- "${@}")
  eval "set -- ${ARGS}"
  while true; do
    case "${1}" in
    -c)
      close_branch="${2}"
      shift 2
      ;;
    --)
      shift
      break
      ;;
    *) action_help ;;
    esac
  done
  local pr_number="$1"
  pr_number=$(get_pr_number "$pr_number")
  local pull_request_url="$BITBUCKET_API_URL/$BITBUCKET_SLUG/pullrequests/$pr_number"
  json_payload=$(jf '{%**q}' "close_source_branch" "$close_branch")
  echo "$json_payload" >"$WORK_FILE"
  curl -X PUT $CURL_FLAGS --user "$CURL_AUTH" -H "$CURL_HEADER_ACCEPT" -H "$CURL_HEADER_CTYPE" "$pull_request_url" "--data" "@$WORK_FILE" | jq --raw-output '"close_source_branch now \(.close_source_branch)"'
}

action_checkout() {
  local pr_number="$1"

  if [[ -z "$pr_number" ]]; then
    echo ">>> No PR"
    exit 1
  fi

  local pull_request_url="$BITBUCKET_API_URL/$BITBUCKET_SLUG/pullrequests/$pr_number"
  body=$(curl $CURL_FLAGS --user "$CURL_AUTH" -H "$CURL_HEADER_ACCEPT" "$pull_request_url")

  branch=$(echo "$body" | jq --raw-output ".source.branch.name")

  git fetch --all
  git switch "$branch"
}

git_switch_default() {
  if [[ -n "$GIT_REMOTE_DEFAULT" && "$GIT_LOCAL_WORKING_BRANCH" ]]; then
    git checkout "$GIT_REMOTE_DEFAULT"
    git pull
    git branch -D "$GIT_LOCAL_WORKING_BRANCH"
  fi
}

emit_squash_merge_msg() {
  local body
  local pr_approvers
  local squash_merge_details
  local title
  local description
  local pr_number="$1"
  local jq_approvers='.participants | .[] | select(.approved==true) | "Approved-By: \(.user.display_name)"'
  local pull_request_url="$BITBUCKET_API_URL/$BITBUCKET_SLUG/pullrequests/$pr_number"

  body=$(curl $CURL_FLAGS --user "$CURL_AUTH" -H "$CURL_HEADER_ACCEPT" "$pull_request_url")
  description=$(echo "$body" | jq --raw-output '.description | gsub("\\\\"; "")')
  title=$(echo "$body" | jq --raw-output ".title")
  # Is - is nicer than *
  squash_merge_details=$(echo "$description" | awk '/SQUASHMERGESTART/,/SQUASHMERGEEND/' |
    { grep -v "SQUASHMERGE" || test $? = 1; } |
    sed -E "s|^\*|-|")
  pr_approvers=$(echo "$body" | jq --raw-output "$jq_approvers")

  shopt -s extglob
  squash_merge_details=${squash_merge_details%%*($'\n')} # remove all trailing newlines
  squash_merge_details=${squash_merge_details##*($'\n')} # remove all leading newlines
  shopt -u extglob

  if [[ -n "$squash_merge_details" ]]; then
    squash_merge_details="${squash_merge_details}"$'\n'$'\n' # add linebreaks to space out approver if set
  fi

  local squash_merge_msg="$title (pull request #$pr_number)

$squash_merge_details$pr_approvers"

  shopt -s extglob
  squash_merge_msg=${squash_merge_msg%%*($'\n')} # remove all trailing newlines
  squash_merge_msg=${squash_merge_msg##*($'\n')} # remove all leading newlines
  shopt -u extglob

  echo "$squash_merge_msg"
}

ACTION=$1 || true
ACTION=${ACTION:="help"}
if [[ -z "$GIT_REMOTE" ]]; then
  ACTION="help"
fi

if [[ "$#" -ne "0" ]]; then shift; fi
if [[ ! "${ACTION}" =~ ^$ACTION_LIST$ ]]; then
  echo "Invalid action [$ACTION]"
  action_help
fi
action_"$ACTION" "$@"
cleanup
