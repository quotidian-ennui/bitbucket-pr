#!/usr/bin/env bash
#shellcheck disable=SC2034

declare -A emojiMap
# build status
emojiMap[SUCCESSFUL]="✅"
emojiMap[FAILED]="⛔"
emojiMap[INPROGRESS]="⌚"
emojiMap[STOPPED]="❌"
# participant.state (approval)
emojiMap[approved]="👍"
emojiMap[changes_requested]="✒️"
emojiMap[null]="👀"
# participant.approved (true|false)
emojiMap[true]="👍"
emojiMap[false]="👀"

# info/warning msgs.
emojiMap[WARN]="⚠️"
emojiMap[INFO]="ℹ️"
emojiMap[VERBOSE]="🔎"

_giturl_to_base() {
  local url=$1
  url=${url%%.git}
  url=${url#*bitbucket*:}
  url=${url#*bitbucket*/}
  echo "$url"
}

EMOJIS_DISABLED=${BB_PR_DISABLE_EMOJIS:-false}
BITBUCKET_API_BASE="https://api.bitbucket.org/2.0"
BITBUCKET_REPO_API_URL="$BITBUCKET_API_BASE/repositories"
GIT_ROOT="$(git rev-parse --show-toplevel 2>/dev/null)" || true
GIT_REMOTE=$(_giturl_to_base "$(git remote get-url origin 2>/dev/null)") || true
BITBUCKET_SLUG=${GIT_REMOTE%.git}
GIT_REMOTE_BRANCH_FULL=$(git rev-parse --abbrev-ref --symbolic-full-name "@{u}" 2>/dev/null) || true
GIT_REMOTE_BRANCH=${GIT_REMOTE_BRANCH_FULL#*/}
GIT_LOCAL_WORKING_BRANCH=$(git branch --show-current 2>/dev/null) || true
GIT_REMOTE_DEFAULT=$(git remote show origin 2>/dev/null | grep 'HEAD branch' | cut -d' ' -f5) || true

WORK_FILE=$(mktemp --tmpdir bb-pr-squash-merge.XXXXXX)
CURL_BB_OUTPUT=$(mktemp --tmpdir bb-pr-squash-merge.XXXXXX)

CURL_AUTH="${BITBUCKET_USER}:${BITBUCKET_TOKEN}"
CURL_HEADER_CTYPE="Content-Type: application/json"
CURL_HEADER_ACCEPT="Accept: application/json"
CURL_FLAGS=("-S" "-s" "-L" "-f")

emoji() {
  local key=$1
  if [[ "$EMOJIS_DISABLED" == "false" ]]; then
    for mapEntry in "${!emojiMap[@]}"; do
      [[ "$key" == "$mapEntry" ]] && echo "${emojiMap[${key}]}" && return
    done
  fi
  echo "$key"
}

confirm_yes() {
  # call with a prompt string or use a default
  read -r -p "${1:-Are you sure? [y/N]} " response
  case "$response" in
  [yY][eE][sS] | [yY])
    true
    ;;
  *)
    false
    ;;
  esac
}

# Need to get someone to let me test on a mac.
# Macs can use pbcopy apparently, but they should just
# set the BB_PR_CLIPBOARD env variable
clipboard_exe() {
  if [[ -z "$BB_PR_CLIPBOARD" ]]; then
    if [[ -n "$WSL_DISTRO_NAME" ]]; then
      LOCAL_DRIVE_C=$(mount | grep "9p" | grep "path=C:" | awk '{print $3}')
      echo "$LOCAL_DRIVE_C/windows/system32/clip.exe"
    elif [[ -n "${XDG_CURRENT_DESKTOP}" ]]; then
      echo "xclip"
    fi
  else
    echo "$BB_PR_CLIPBOARD"
  fi
}

cleanup() {
  if [[ -n "${WORK_FILE:-}" ]]; then
    rm -f "$WORK_FILE"
  fi
  if [[ -n "${CURL_BB_OUTPUT:-}" ]]; then
    rm -f "$CURL_BB_OUTPUT"
  fi
}

get_pr_number() {
  local pr_number="$1"

  pr_number=$(__pr_from_branch "$pr_number")
  if [[ -z "$pr_number" ]]; then
    pr_number=$(__pr_from_fzf)
  fi
  echo "$pr_number"
}

git_switch_default() {
  if [[ -n "$GIT_REMOTE_DEFAULT" && "$GIT_LOCAL_WORKING_BRANCH" ]]; then
    git switch "$GIT_REMOTE_DEFAULT"
    git pull
    git branch --delete --force --remotes "$GIT_REMOTE_BRANCH_FULL"
    git branch --delete --force "$GIT_LOCAL_WORKING_BRANCH"
  fi
}

__emit_squash_merge_msg_from_body() {
  local body="$1"
  local pr_approvers
  local squash_merge_details
  local title
  local description
  local jq_approvers='.participants | .[] | select(.approved==true) | "Approved-By: \(.user.display_name)"'

  description=$(echo "$body" | jq --raw-output '.description | gsub("\\\\"; "")')
  title=$(echo "$body" | jq --raw-output ".title")
  # Is - is nicer than *
  squash_merge_details=$(echo "$description" | awk '/SQUASHMERGESTART/,/SQUASHMERGEEND/' |
    { grep -v "SQUASHMERGE" || test $? = 1; } |
    sed -E "s|^\*|-|")
  squash_merge_footer=$(echo "$description" | awk '/SQUASHMERGEFOOTERSTART/,/SQUASHMERGEFOOTEREND/' |
    { grep -v "SQUASHMERGEFOOTER" || test $? = 1; } | tr -s '\n' '\n')
  pr_approvers=$(echo "$body" | jq --raw-output "$jq_approvers" | tr -s '\n' '\n')

  shopt -s extglob
  squash_merge_details=${squash_merge_details%%*($'\n')} # remove all trailing newlines
  squash_merge_details=${squash_merge_details##*($'\n')} # remove all leading newlines
  squash_merge_footer=${squash_merge_footer%%*($'\n')}   # remove all trailing newlines
  squash_merge_footer=${squash_merge_footer##*($'\n')}   # remove all leading newlines
  shopt -u extglob

  squash_merge_details=$(echo "${squash_merge_details}" | sed -E 's/\[(.*?)\]\(.*?\)/\1/g') # remove markdown links
  squash_merge_footer=$(echo "${squash_merge_footer}" | sed -E 's/\[(.*?)\]\(.*?\)/\1/g')   # remove markdown links

  if [[ -n "$squash_merge_details" ]]; then
    squash_merge_details="${squash_merge_details}"$'\n'$'\n' # add linebreaks to space out approver if set
  fi
  if [[ -n "$squash_merge_footer" ]]; then
    squash_merge_footer="${squash_merge_footer}"$'\n' # add linebreaks to space out approver if set
  fi

  local squash_merge_msg="$title (pull request #$pr_number)

$squash_merge_details$squash_merge_footer$pr_approvers"

  shopt -s extglob
  squash_merge_msg=${squash_merge_msg%%*($'\n')} # remove all trailing newlines
  squash_merge_msg=${squash_merge_msg##*($'\n')} # remove all leading newlines
  shopt -u extglob

  echo "$squash_merge_msg"
}

__emit_squash_merge_msg() {
  local body
  local pr_number="$1"
  local pull_request_url="$BITBUCKET_REPO_API_URL/$BITBUCKET_SLUG/pullrequests/$pr_number"

  body=$(__bb_rest_invoke "$pull_request_url")
  __emit_squash_merge_msg_from_body "$body"
}

__bb_rest_invoke() {
  curl "${CURL_FLAGS[@]}" --user "$CURL_AUTH" -H "$CURL_HEADER_ACCEPT" "$@"
}

# __bb_rest_with_callback
#
# Performs a Bitbucket REST API request using curl, handles HTTP errors, and processes the response
# via user-supplied success and failure callback functions.
#
# Arguments:
#   $1 - The command to handle successful responses (successOutput)
#   $2 - The command to handle error responses (failureOutput)
#   $3 - The command to call after a successful response (successCallback), or "" for none
#   $@ - Remaining arguments are passed directly to curl (e.g., -X PUT, URL, --data, etc.)
#
# Behaviour:
#   - Executes curl with the provided arguments, writing output to $CURL_BB_OUTPUT and capturing HTTP code.
#   - If HTTP code >= 400, invokes the failureOutput function with the response, prints its output,
#     or prints the raw response if no message is found, then exits with error.
#   - If HTTP code < 400, invokes the successOutput function with the response and, if provided,
#     calls the successCallback function.
#
# Usage Example:
#   __bb_rest_with_callback my_success_message my_failure_message "if_successful_action"
#      -X PUT -H "$CURL_HEADER_CTYPE" "$url" --data "$body"
__bb_rest_with_callback() {
  local http_code
  local errorMsg
  local successOutput="$1"
  local failureOutput="$2"
  local successCallback="$3"
  shift 3

  http_code=$(curl -sSL --user "$CURL_AUTH" -H "$CURL_HEADER_ACCEPT" -o "$CURL_BB_OUTPUT" -w "%{http_code}" "$@")
  if [[ "$http_code" -ge "400" ]]; then
    #shellcheck disable=SC2002
    errorMsg=$(cat "${CURL_BB_OUTPUT}" | ($failureOutput))
    if [[ "$errorMsg" != "" ]]; then
      echo -e "$errorMsg"
    else
      cat "${CURL_BB_OUTPUT}"
    fi
    echo Operation failed...
    exit 1
  else
    #shellcheck disable=SC2002
    cat "${CURL_BB_OUTPUT}" | ($successOutput)
    if [[ -n "$successCallback" ]]; then
      ($successCallback)
    fi
  fi
}

__emit_pr_list() {
  local jq_transform_with_url='.values[]
    | { "id": (.id | tostring), "title": .title, "url": .links.html.href }
    | "\(.id)|\(.title)|\(.url)"
  '
  local jq_transform_sans_url='.values[]
    | { "id": (.id | tostring), "title": .title }
    | "\(.id)|\(.title)"
  '

  local response
  local next
  local includeUrl="true"
  local jq_transform="$jq_transform_with_url"
  local state="OPEN"
  while getopts 's:q' flag; do
    case "${flag}" in
    s) state="${OPTARG}" ;;
    q)
      jq_transform="$jq_transform_sans_url"
      includeUrl="false"
      ;;
    *) action_help ;;
    esac
  done
  state=$(echo "$state" | tr '[:lower:]' '[:upper:]')
  local pull_request_url="$BITBUCKET_REPO_API_URL/$BITBUCKET_SLUG/pullrequests?state=$state"

  {
    next="$pull_request_url"
    results=""
    until [[ "$next" == "null" || "$next" == "" ]]; do
      response=$(__bb_rest_invoke "$next")
      results+=$(echo "$response" | jq --raw-output "$jq_transform")
      next=$(echo "$response" | jq --raw-output ".next" || true)
    done

    column_args=()
    if [[ "$includeUrl" == "true" ]]; then
      column_args=(-N "ID,TITLE,URL")
    else
      column_args=(-N "ID,TITLE")
    fi
    echo "$results" | sort | column -s "|" -t "${column_args[@]}"
  }
}

__pr_from_fzf() {
  local pr_number=""

  if type -p fzf >/dev/null; then
    pr_number=$(bb-pr list -q |
      fzf --height 50% --layout reverse --no-sort --header-lines 1 --prompt="Select PR > " |
      cut -d' ' -f1)
  fi
  echo "$pr_number"
}

__pr_from_branch() {
  local pr_number=$1

  if [[ -z "$pr_number" && -n "${GIT_REMOTE_BRANCH}" ]]; then
    query=$(printf "source.branch.name=\"%s\" AND state=\"OPEN\"" "${GIT_REMOTE_BRANCH}")
    query_uri=$(printf %s "${query}" | jq -sRr @uri)
    local pull_request_query_url="${BITBUCKET_REPO_API_URL}/${BITBUCKET_SLUG}/pullrequests?q=${query_uri}"
    pr_number=$(__bb_rest_invoke "${pull_request_query_url}" | jq .values[0].id)
    if [ "$pr_number" != "null" ]; then
      echo "$pr_number"
    fi
  else
    echo "$pr_number"
  fi
}

trap cleanup 1 2 15
